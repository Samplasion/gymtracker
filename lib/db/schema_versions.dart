import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema3 extends i0.VersionedSchema {
  Schema3({required super.database}) : super(version: 3);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    customExercises,
    routines,
    historyWorkouts,
    historyWorkoutExercises,
    routineExercises,
    preferences,
    ongoingData,
    weightMeasurements,
  ];
  late final Shape0 customExercises = Shape0(
      source: i0.VersionedTable(
        entityName: 'custom_exercises',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 routines = Shape1(
      source: i0.VersionedTable(
        entityName: 'routines',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 historyWorkouts = Shape2(
      source: i0.VersionedTable(
        entityName: 'history_workouts',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
          'UNIQUE(completed_by, completes)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_9,
          _column_10,
          _column_11,
          _column_12,
          _column_13,
          _column_14,
          _column_6,
          _column_7,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 historyWorkoutExercises = Shape3(
      source: i0.VersionedTable(
        entityName: 'history_workout_exercises',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_15,
          _column_1,
          _column_16,
          _column_17,
          _column_18,
          _column_19,
          _column_20,
          _column_21,
          _column_22,
          _column_23,
          _column_24,
          _column_25,
          _column_26,
          _column_27,
          _column_8,
          _column_28,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 routineExercises = Shape3(
      source: i0.VersionedTable(
        entityName: 'routine_exercises',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_29,
          _column_1,
          _column_16,
          _column_17,
          _column_18,
          _column_19,
          _column_20,
          _column_21,
          _column_22,
          _column_23,
          _column_24,
          _column_25,
          _column_26,
          _column_30,
          _column_8,
          _column_31,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 preferences = Shape4(
      source: i0.VersionedTable(
        entityName: 'preferences',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_32,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 ongoingData = Shape4(
      source: i0.VersionedTable(
        entityName: 'ongoing_data',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_32,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape5 weightMeasurements = Shape5(
      source: i0.VersionedTable(
        entityName: 'weight_measurements',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_33,
          _column_34,
          _column_6,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get parameters =>
      columnsByName['parameters']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get primaryMuscleGroup =>
      columnsByName['primary_muscle_group']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get secondaryMuscleGroups =>
      columnsByName['secondary_muscle_groups']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_0(String aliasedName) =>
    i1.GeneratedColumn<String>('id', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_1(String aliasedName) =>
    i1.GeneratedColumn<String>('name', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_2(String aliasedName) =>
    i1.GeneratedColumn<String>('parameters', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_3(String aliasedName) =>
    i1.GeneratedColumn<String>('primary_muscle_group', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_4(String aliasedName) =>
    i1.GeneratedColumn<String>('secondary_muscle_groups', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get infobox =>
      columnsByName['infobox']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get weightUnit =>
      columnsByName['weight_unit']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get distanceUnit =>
      columnsByName['distance_unit']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get sortOrder =>
      columnsByName['sort_order']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<String> _column_5(String aliasedName) =>
    i1.GeneratedColumn<String>('infobox', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_6(String aliasedName) =>
    i1.GeneratedColumn<String>('weight_unit', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_7(String aliasedName) =>
    i1.GeneratedColumn<String>('distance_unit', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_8(String aliasedName) =>
    i1.GeneratedColumn<int>('sort_order', aliasedName, false,
        type: i1.DriftSqlType.int);

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get infobox =>
      columnsByName['infobox']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get duration =>
      columnsByName['duration']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get startingDate =>
      columnsByName['starting_date']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get parentId =>
      columnsByName['parent_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get completedBy =>
      columnsByName['completed_by']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get completes =>
      columnsByName['completes']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get weightUnit =>
      columnsByName['weight_unit']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get distanceUnit =>
      columnsByName['distance_unit']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_9(String aliasedName) =>
    i1.GeneratedColumn<String>('infobox', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_10(String aliasedName) =>
    i1.GeneratedColumn<int>('duration', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<DateTime> _column_11(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('starting_date', aliasedName, false,
        type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<String> _column_12(String aliasedName) =>
    i1.GeneratedColumn<String>('parent_id', aliasedName, true,
        type: i1.DriftSqlType.string,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('REFERENCES routines (id)'));
i1.GeneratedColumn<String> _column_13(String aliasedName) =>
    i1.GeneratedColumn<String>('completed_by', aliasedName, true,
        type: i1.DriftSqlType.string,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES history_workouts (id)'));
i1.GeneratedColumn<String> _column_14(String aliasedName) =>
    i1.GeneratedColumn<String>('completes', aliasedName, true,
        type: i1.DriftSqlType.string,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES history_workouts (id)'));

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get routineId =>
      columnsByName['routine_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get parameters =>
      columnsByName['parameters']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get sets =>
      columnsByName['sets']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get primaryMuscleGroup =>
      columnsByName['primary_muscle_group']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get secondaryMuscleGroups =>
      columnsByName['secondary_muscle_groups']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get restTime =>
      columnsByName['rest_time']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get isCustom =>
      columnsByName['is_custom']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get libraryExerciseId =>
      columnsByName['library_exercise_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get customExerciseId =>
      columnsByName['custom_exercise_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get notes =>
      columnsByName['notes']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get isSuperset =>
      columnsByName['is_superset']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get isInSuperset =>
      columnsByName['is_in_superset']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get supersetId =>
      columnsByName['superset_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get sortOrder =>
      columnsByName['sort_order']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get supersedesId =>
      columnsByName['supersedes_id']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_15(String aliasedName) =>
    i1.GeneratedColumn<String>('routine_id', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES history_workouts (id)'));
i1.GeneratedColumn<String> _column_16(String aliasedName) =>
    i1.GeneratedColumn<String>('parameters', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_17(String aliasedName) =>
    i1.GeneratedColumn<String>('sets', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_18(String aliasedName) =>
    i1.GeneratedColumn<String>('primary_muscle_group', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_19(String aliasedName) =>
    i1.GeneratedColumn<String>('secondary_muscle_groups', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_20(String aliasedName) =>
    i1.GeneratedColumn<int>('rest_time', aliasedName, true,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<bool> _column_21(String aliasedName) =>
    i1.GeneratedColumn<bool>('is_custom', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("is_custom" IN (0, 1))'));
i1.GeneratedColumn<String> _column_22(String aliasedName) =>
    i1.GeneratedColumn<String>('library_exercise_id', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_23(String aliasedName) =>
    i1.GeneratedColumn<String>('custom_exercise_id', aliasedName, true,
        type: i1.DriftSqlType.string,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES custom_exercises (id)'));
i1.GeneratedColumn<String> _column_24(String aliasedName) =>
    i1.GeneratedColumn<String>('notes', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<bool> _column_25(String aliasedName) =>
    i1.GeneratedColumn<bool>('is_superset', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("is_superset" IN (0, 1))'));
i1.GeneratedColumn<bool> _column_26(String aliasedName) =>
    i1.GeneratedColumn<bool>('is_in_superset', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("is_in_superset" IN (0, 1))'));
i1.GeneratedColumn<String> _column_27(String aliasedName) =>
    i1.GeneratedColumn<String>('superset_id', aliasedName, true,
        type: i1.DriftSqlType.string,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES history_workout_exercises (id)'));
i1.GeneratedColumn<String> _column_28(String aliasedName) =>
    i1.GeneratedColumn<String>('supersedes_id', aliasedName, true,
        type: i1.DriftSqlType.string,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES history_workout_exercises (id)'));
i1.GeneratedColumn<String> _column_29(String aliasedName) =>
    i1.GeneratedColumn<String>('routine_id', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('REFERENCES routines (id)'));
i1.GeneratedColumn<String> _column_30(String aliasedName) =>
    i1.GeneratedColumn<String>('superset_id', aliasedName, true,
        type: i1.DriftSqlType.string,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES routine_exercises (id)'));
i1.GeneratedColumn<String> _column_31(String aliasedName) =>
    i1.GeneratedColumn<String>('supersedes_id', aliasedName, true,
        type: i1.DriftSqlType.string,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES routine_exercises (id)'));

class Shape4 extends i0.VersionedTable {
  Shape4({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get data =>
      columnsByName['data']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_32(String aliasedName) =>
    i1.GeneratedColumn<String>('data', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape5 extends i0.VersionedTable {
  Shape5({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<double> get weight =>
      columnsByName['weight']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<DateTime> get time =>
      columnsByName['time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get weightUnit =>
      columnsByName['weight_unit']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<double> _column_33(String aliasedName) =>
    i1.GeneratedColumn<double>('weight', aliasedName, false,
        type: i1.DriftSqlType.double);
i1.GeneratedColumn<DateTime> _column_34(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('time', aliasedName, false,
        type: i1.DriftSqlType.dateTime);

final class Schema4 extends i0.VersionedSchema {
  Schema4({required super.database}) : super(version: 4);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    customExercises,
    routineFolders,
    routines,
    historyWorkouts,
    historyWorkoutExercises,
    routineExercises,
    preferences,
    ongoingData,
    weightMeasurements,
  ];
  late final Shape0 customExercises = Shape0(
      source: i0.VersionedTable(
        entityName: 'custom_exercises',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape6 routineFolders = Shape6(
      source: i0.VersionedTable(
        entityName: 'routine_folders',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_8,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape7 routines = Shape7(
      source: i0.VersionedTable(
        entityName: 'routines',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
          _column_35,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 historyWorkouts = Shape2(
      source: i0.VersionedTable(
        entityName: 'history_workouts',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
          'UNIQUE(completed_by, completes)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_9,
          _column_10,
          _column_11,
          _column_12,
          _column_13,
          _column_14,
          _column_6,
          _column_7,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 historyWorkoutExercises = Shape3(
      source: i0.VersionedTable(
        entityName: 'history_workout_exercises',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_15,
          _column_1,
          _column_16,
          _column_17,
          _column_18,
          _column_19,
          _column_20,
          _column_21,
          _column_22,
          _column_23,
          _column_24,
          _column_25,
          _column_26,
          _column_27,
          _column_8,
          _column_28,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 routineExercises = Shape3(
      source: i0.VersionedTable(
        entityName: 'routine_exercises',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_29,
          _column_1,
          _column_16,
          _column_17,
          _column_18,
          _column_19,
          _column_20,
          _column_21,
          _column_22,
          _column_23,
          _column_24,
          _column_25,
          _column_26,
          _column_30,
          _column_8,
          _column_31,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 preferences = Shape4(
      source: i0.VersionedTable(
        entityName: 'preferences',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_32,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 ongoingData = Shape4(
      source: i0.VersionedTable(
        entityName: 'ongoing_data',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_32,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape5 weightMeasurements = Shape5(
      source: i0.VersionedTable(
        entityName: 'weight_measurements',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_33,
          _column_34,
          _column_6,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape6 extends i0.VersionedTable {
  Shape6({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get sortOrder =>
      columnsByName['sort_order']! as i1.GeneratedColumn<int>;
}

class Shape7 extends i0.VersionedTable {
  Shape7({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get infobox =>
      columnsByName['infobox']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get weightUnit =>
      columnsByName['weight_unit']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get distanceUnit =>
      columnsByName['distance_unit']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get sortOrder =>
      columnsByName['sort_order']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get folderId =>
      columnsByName['folder_id']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_35(String aliasedName) =>
    i1.GeneratedColumn<String>('folder_id', aliasedName, true,
        type: i1.DriftSqlType.string,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES routine_folders (id)'));

final class Schema5 extends i0.VersionedSchema {
  Schema5({required super.database}) : super(version: 5);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    customExercises,
    routineFolders,
    routines,
    historyWorkouts,
    historyWorkoutExercises,
    routineExercises,
    preferences,
    ongoingData,
    weightMeasurements,
  ];
  late final Shape0 customExercises = Shape0(
      source: i0.VersionedTable(
        entityName: 'custom_exercises',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape6 routineFolders = Shape6(
      source: i0.VersionedTable(
        entityName: 'routine_folders',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_8,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape7 routines = Shape7(
      source: i0.VersionedTable(
        entityName: 'routines',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
          _column_35,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 historyWorkouts = Shape2(
      source: i0.VersionedTable(
        entityName: 'history_workouts',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
          'UNIQUE(completed_by, completes)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_9,
          _column_10,
          _column_11,
          _column_12,
          _column_13,
          _column_14,
          _column_6,
          _column_7,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape8 historyWorkoutExercises = Shape8(
      source: i0.VersionedTable(
        entityName: 'history_workout_exercises',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_15,
          _column_1,
          _column_16,
          _column_17,
          _column_18,
          _column_19,
          _column_20,
          _column_21,
          _column_22,
          _column_23,
          _column_24,
          _column_25,
          _column_26,
          _column_27,
          _column_8,
          _column_28,
          _column_36,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape8 routineExercises = Shape8(
      source: i0.VersionedTable(
        entityName: 'routine_exercises',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_29,
          _column_1,
          _column_16,
          _column_17,
          _column_18,
          _column_19,
          _column_20,
          _column_21,
          _column_22,
          _column_23,
          _column_24,
          _column_25,
          _column_26,
          _column_30,
          _column_8,
          _column_31,
          _column_36,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 preferences = Shape4(
      source: i0.VersionedTable(
        entityName: 'preferences',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_32,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 ongoingData = Shape4(
      source: i0.VersionedTable(
        entityName: 'ongoing_data',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_32,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape5 weightMeasurements = Shape5(
      source: i0.VersionedTable(
        entityName: 'weight_measurements',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_33,
          _column_34,
          _column_6,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape8 extends i0.VersionedTable {
  Shape8({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get routineId =>
      columnsByName['routine_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get parameters =>
      columnsByName['parameters']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get sets =>
      columnsByName['sets']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get primaryMuscleGroup =>
      columnsByName['primary_muscle_group']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get secondaryMuscleGroups =>
      columnsByName['secondary_muscle_groups']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get restTime =>
      columnsByName['rest_time']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get isCustom =>
      columnsByName['is_custom']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get libraryExerciseId =>
      columnsByName['library_exercise_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get customExerciseId =>
      columnsByName['custom_exercise_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get notes =>
      columnsByName['notes']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get isSuperset =>
      columnsByName['is_superset']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get isInSuperset =>
      columnsByName['is_in_superset']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get supersetId =>
      columnsByName['superset_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get sortOrder =>
      columnsByName['sort_order']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get supersedesId =>
      columnsByName['supersedes_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get rpe =>
      columnsByName['rpe']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_36(String aliasedName) =>
    i1.GeneratedColumn<int>('rpe', aliasedName, true,
        type: i1.DriftSqlType.int);

final class Schema6 extends i0.VersionedSchema {
  Schema6({required super.database}) : super(version: 6);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    customExercises,
    routineFolders,
    routines,
    historyWorkouts,
    historyWorkoutExercises,
    routineExercises,
    preferences,
    ongoingData,
    weightMeasurements,
    foods,
    nutritionGoals,
  ];
  late final Shape0 customExercises = Shape0(
      source: i0.VersionedTable(
        entityName: 'custom_exercises',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape6 routineFolders = Shape6(
      source: i0.VersionedTable(
        entityName: 'routine_folders',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_8,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape7 routines = Shape7(
      source: i0.VersionedTable(
        entityName: 'routines',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
          _column_35,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 historyWorkouts = Shape2(
      source: i0.VersionedTable(
        entityName: 'history_workouts',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
          'UNIQUE(completed_by, completes)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_9,
          _column_10,
          _column_11,
          _column_12,
          _column_13,
          _column_14,
          _column_6,
          _column_7,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape8 historyWorkoutExercises = Shape8(
      source: i0.VersionedTable(
        entityName: 'history_workout_exercises',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_15,
          _column_1,
          _column_16,
          _column_17,
          _column_18,
          _column_19,
          _column_20,
          _column_21,
          _column_22,
          _column_23,
          _column_24,
          _column_25,
          _column_26,
          _column_27,
          _column_8,
          _column_28,
          _column_36,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape8 routineExercises = Shape8(
      source: i0.VersionedTable(
        entityName: 'routine_exercises',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_29,
          _column_1,
          _column_16,
          _column_17,
          _column_18,
          _column_19,
          _column_20,
          _column_21,
          _column_22,
          _column_23,
          _column_24,
          _column_25,
          _column_26,
          _column_30,
          _column_8,
          _column_31,
          _column_36,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 preferences = Shape4(
      source: i0.VersionedTable(
        entityName: 'preferences',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_32,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 ongoingData = Shape4(
      source: i0.VersionedTable(
        entityName: 'ongoing_data',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_32,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape5 weightMeasurements = Shape5(
      source: i0.VersionedTable(
        entityName: 'weight_measurements',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_33,
          _column_34,
          _column_6,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape9 foods = Shape9(
      source: i0.VersionedTable(
        entityName: 'foods',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_37,
          _column_38,
          _column_39,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape10 nutritionGoals = Shape10(
      source: i0.VersionedTable(
        entityName: 'nutrition_goals',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_38,
          _column_40,
          _column_41,
          _column_42,
          _column_43,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape9 extends i0.VersionedTable {
  Shape9({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get dateAdded =>
      columnsByName['date_added']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get referenceDate =>
      columnsByName['reference_date']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get jsonData =>
      columnsByName['json_data']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<DateTime> _column_37(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('date_added', aliasedName, false,
        type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<DateTime> _column_38(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('reference_date', aliasedName, false,
        type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<String> _column_39(String aliasedName) =>
    i1.GeneratedColumn<String>('json_data', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape10 extends i0.VersionedTable {
  Shape10({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get referenceDate =>
      columnsByName['reference_date']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<double> get calories =>
      columnsByName['calories']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get fat =>
      columnsByName['fat']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get carbs =>
      columnsByName['carbs']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get protein =>
      columnsByName['protein']! as i1.GeneratedColumn<double>;
}

i1.GeneratedColumn<double> _column_40(String aliasedName) =>
    i1.GeneratedColumn<double>('calories', aliasedName, false,
        type: i1.DriftSqlType.double);
i1.GeneratedColumn<double> _column_41(String aliasedName) =>
    i1.GeneratedColumn<double>('fat', aliasedName, false,
        type: i1.DriftSqlType.double);
i1.GeneratedColumn<double> _column_42(String aliasedName) =>
    i1.GeneratedColumn<double>('carbs', aliasedName, false,
        type: i1.DriftSqlType.double);
i1.GeneratedColumn<double> _column_43(String aliasedName) =>
    i1.GeneratedColumn<double>('protein', aliasedName, false,
        type: i1.DriftSqlType.double);

final class Schema7 extends i0.VersionedSchema {
  Schema7({required super.database}) : super(version: 7);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    customExercises,
    routineFolders,
    routines,
    historyWorkouts,
    historyWorkoutExercises,
    routineExercises,
    preferences,
    ongoingData,
    weightMeasurements,
    foods,
    nutritionGoals,
    customBarcodeFoods,
    favoriteFoods,
  ];
  late final Shape0 customExercises = Shape0(
      source: i0.VersionedTable(
        entityName: 'custom_exercises',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape6 routineFolders = Shape6(
      source: i0.VersionedTable(
        entityName: 'routine_folders',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_8,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape7 routines = Shape7(
      source: i0.VersionedTable(
        entityName: 'routines',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
          _column_35,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 historyWorkouts = Shape2(
      source: i0.VersionedTable(
        entityName: 'history_workouts',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
          'UNIQUE(completed_by, completes)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_9,
          _column_10,
          _column_11,
          _column_12,
          _column_13,
          _column_14,
          _column_6,
          _column_7,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape8 historyWorkoutExercises = Shape8(
      source: i0.VersionedTable(
        entityName: 'history_workout_exercises',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_15,
          _column_1,
          _column_16,
          _column_17,
          _column_18,
          _column_19,
          _column_20,
          _column_21,
          _column_22,
          _column_23,
          _column_24,
          _column_25,
          _column_26,
          _column_27,
          _column_8,
          _column_28,
          _column_36,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape8 routineExercises = Shape8(
      source: i0.VersionedTable(
        entityName: 'routine_exercises',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_29,
          _column_1,
          _column_16,
          _column_17,
          _column_18,
          _column_19,
          _column_20,
          _column_21,
          _column_22,
          _column_23,
          _column_24,
          _column_25,
          _column_26,
          _column_30,
          _column_8,
          _column_31,
          _column_36,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 preferences = Shape4(
      source: i0.VersionedTable(
        entityName: 'preferences',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_32,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 ongoingData = Shape4(
      source: i0.VersionedTable(
        entityName: 'ongoing_data',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_32,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape5 weightMeasurements = Shape5(
      source: i0.VersionedTable(
        entityName: 'weight_measurements',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_33,
          _column_34,
          _column_6,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape9 foods = Shape9(
      source: i0.VersionedTable(
        entityName: 'foods',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_37,
          _column_38,
          _column_39,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape10 nutritionGoals = Shape10(
      source: i0.VersionedTable(
        entityName: 'nutrition_goals',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_38,
          _column_40,
          _column_41,
          _column_42,
          _column_43,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape11 customBarcodeFoods = Shape11(
      source: i0.VersionedTable(
        entityName: 'custom_barcode_foods',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(barcode)',
        ],
        columns: [
          _column_44,
          _column_39,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape12 favoriteFoods = Shape12(
      source: i0.VersionedTable(
        entityName: 'favorite_foods',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_45,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape11 extends i0.VersionedTable {
  Shape11({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get barcode =>
      columnsByName['barcode']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get jsonData =>
      columnsByName['json_data']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_44(String aliasedName) =>
    i1.GeneratedColumn<String>('barcode', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape12 extends i0.VersionedTable {
  Shape12({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get foodId =>
      columnsByName['food_id']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_45(String aliasedName) =>
    i1.GeneratedColumn<String>('food_id', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('REFERENCES foods (id)'));

final class Schema8 extends i0.VersionedSchema {
  Schema8({required super.database}) : super(version: 8);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    customExercises,
    routineFolders,
    routines,
    historyWorkouts,
    historyWorkoutExercises,
    routineExercises,
    preferences,
    ongoingData,
    weightMeasurements,
    foods,
    nutritionGoals,
    customBarcodeFoods,
    favoriteFoods,
    nutritionCategories,
  ];
  late final Shape0 customExercises = Shape0(
      source: i0.VersionedTable(
        entityName: 'custom_exercises',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape6 routineFolders = Shape6(
      source: i0.VersionedTable(
        entityName: 'routine_folders',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_8,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape7 routines = Shape7(
      source: i0.VersionedTable(
        entityName: 'routines',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
          _column_35,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 historyWorkouts = Shape2(
      source: i0.VersionedTable(
        entityName: 'history_workouts',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
          'UNIQUE(completed_by, completes)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_9,
          _column_10,
          _column_11,
          _column_12,
          _column_13,
          _column_14,
          _column_6,
          _column_7,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape8 historyWorkoutExercises = Shape8(
      source: i0.VersionedTable(
        entityName: 'history_workout_exercises',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_15,
          _column_1,
          _column_16,
          _column_17,
          _column_18,
          _column_19,
          _column_20,
          _column_21,
          _column_22,
          _column_23,
          _column_24,
          _column_25,
          _column_26,
          _column_27,
          _column_8,
          _column_28,
          _column_36,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape8 routineExercises = Shape8(
      source: i0.VersionedTable(
        entityName: 'routine_exercises',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_29,
          _column_1,
          _column_16,
          _column_17,
          _column_18,
          _column_19,
          _column_20,
          _column_21,
          _column_22,
          _column_23,
          _column_24,
          _column_25,
          _column_26,
          _column_30,
          _column_8,
          _column_31,
          _column_36,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 preferences = Shape4(
      source: i0.VersionedTable(
        entityName: 'preferences',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_32,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 ongoingData = Shape4(
      source: i0.VersionedTable(
        entityName: 'ongoing_data',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_32,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape5 weightMeasurements = Shape5(
      source: i0.VersionedTable(
        entityName: 'weight_measurements',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_33,
          _column_34,
          _column_6,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape9 foods = Shape9(
      source: i0.VersionedTable(
        entityName: 'foods',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_37,
          _column_38,
          _column_39,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape10 nutritionGoals = Shape10(
      source: i0.VersionedTable(
        entityName: 'nutrition_goals',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_38,
          _column_40,
          _column_41,
          _column_42,
          _column_43,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape11 customBarcodeFoods = Shape11(
      source: i0.VersionedTable(
        entityName: 'custom_barcode_foods',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(barcode)',
        ],
        columns: [
          _column_44,
          _column_39,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape12 favoriteFoods = Shape12(
      source: i0.VersionedTable(
        entityName: 'favorite_foods',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_45,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape13 nutritionCategories = Shape13(
      source: i0.VersionedTable(
        entityName: 'nutrition_categories',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_38,
          _column_39,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape13 extends i0.VersionedTable {
  Shape13({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<DateTime> get referenceDate =>
      columnsByName['reference_date']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get jsonData =>
      columnsByName['json_data']! as i1.GeneratedColumn<String>;
}

final class Schema9 extends i0.VersionedSchema {
  Schema9({required super.database}) : super(version: 9);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    customExercises,
    routineFolders,
    routines,
    historyWorkouts,
    historyWorkoutExercises,
    routineExercises,
    preferences,
    ongoingData,
    weightMeasurements,
    foods,
    nutritionGoals,
    customBarcodeFoods,
    favoriteFoods,
    nutritionCategories,
  ];
  late final Shape14 customExercises = Shape14(
      source: i0.VersionedTable(
        entityName: 'custom_exercises',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
          _column_46,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape6 routineFolders = Shape6(
      source: i0.VersionedTable(
        entityName: 'routine_folders',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_8,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape7 routines = Shape7(
      source: i0.VersionedTable(
        entityName: 'routines',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
          _column_35,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 historyWorkouts = Shape2(
      source: i0.VersionedTable(
        entityName: 'history_workouts',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
          'UNIQUE(completed_by, completes)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_9,
          _column_10,
          _column_11,
          _column_12,
          _column_13,
          _column_14,
          _column_6,
          _column_7,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape15 historyWorkoutExercises = Shape15(
      source: i0.VersionedTable(
        entityName: 'history_workout_exercises',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_15,
          _column_1,
          _column_16,
          _column_17,
          _column_18,
          _column_19,
          _column_20,
          _column_21,
          _column_22,
          _column_23,
          _column_24,
          _column_25,
          _column_26,
          _column_27,
          _column_8,
          _column_28,
          _column_36,
          _column_46,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape15 routineExercises = Shape15(
      source: i0.VersionedTable(
        entityName: 'routine_exercises',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_29,
          _column_1,
          _column_16,
          _column_17,
          _column_18,
          _column_19,
          _column_20,
          _column_21,
          _column_22,
          _column_23,
          _column_24,
          _column_25,
          _column_26,
          _column_30,
          _column_8,
          _column_31,
          _column_36,
          _column_46,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 preferences = Shape4(
      source: i0.VersionedTable(
        entityName: 'preferences',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_32,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 ongoingData = Shape4(
      source: i0.VersionedTable(
        entityName: 'ongoing_data',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_32,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape5 weightMeasurements = Shape5(
      source: i0.VersionedTable(
        entityName: 'weight_measurements',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_33,
          _column_34,
          _column_6,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape9 foods = Shape9(
      source: i0.VersionedTable(
        entityName: 'foods',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_37,
          _column_38,
          _column_39,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape10 nutritionGoals = Shape10(
      source: i0.VersionedTable(
        entityName: 'nutrition_goals',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_38,
          _column_40,
          _column_41,
          _column_42,
          _column_43,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape11 customBarcodeFoods = Shape11(
      source: i0.VersionedTable(
        entityName: 'custom_barcode_foods',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(barcode)',
        ],
        columns: [
          _column_44,
          _column_39,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape12 favoriteFoods = Shape12(
      source: i0.VersionedTable(
        entityName: 'favorite_foods',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_45,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape13 nutritionCategories = Shape13(
      source: i0.VersionedTable(
        entityName: 'nutrition_categories',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_38,
          _column_39,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape14 extends i0.VersionedTable {
  Shape14({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get parameters =>
      columnsByName['parameters']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get primaryMuscleGroup =>
      columnsByName['primary_muscle_group']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get secondaryMuscleGroups =>
      columnsByName['secondary_muscle_groups']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get equipment =>
      columnsByName['equipment']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_46(String aliasedName) =>
    i1.GeneratedColumn<String>('equipment', aliasedName, true,
        type: i1.DriftSqlType.string);

class Shape15 extends i0.VersionedTable {
  Shape15({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get routineId =>
      columnsByName['routine_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get parameters =>
      columnsByName['parameters']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get sets =>
      columnsByName['sets']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get primaryMuscleGroup =>
      columnsByName['primary_muscle_group']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get secondaryMuscleGroups =>
      columnsByName['secondary_muscle_groups']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get restTime =>
      columnsByName['rest_time']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get isCustom =>
      columnsByName['is_custom']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get libraryExerciseId =>
      columnsByName['library_exercise_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get customExerciseId =>
      columnsByName['custom_exercise_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get notes =>
      columnsByName['notes']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get isSuperset =>
      columnsByName['is_superset']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get isInSuperset =>
      columnsByName['is_in_superset']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get supersetId =>
      columnsByName['superset_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get sortOrder =>
      columnsByName['sort_order']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get supersedesId =>
      columnsByName['supersedes_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get rpe =>
      columnsByName['rpe']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get equipment =>
      columnsByName['equipment']! as i1.GeneratedColumn<String>;
}

final class Schema10 extends i0.VersionedSchema {
  Schema10({required super.database}) : super(version: 10);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    customExercises,
    routineFolders,
    routines,
    historyWorkouts,
    historyWorkoutExercises,
    routineExercises,
    preferences,
    ongoingData,
    weightMeasurements,
    foods,
    nutritionGoals,
    customBarcodeFoods,
    favoriteFoods,
    nutritionCategories,
    achievements,
  ];
  late final Shape14 customExercises = Shape14(
      source: i0.VersionedTable(
        entityName: 'custom_exercises',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
          _column_46,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape6 routineFolders = Shape6(
      source: i0.VersionedTable(
        entityName: 'routine_folders',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_8,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape7 routines = Shape7(
      source: i0.VersionedTable(
        entityName: 'routines',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
          _column_35,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 historyWorkouts = Shape2(
      source: i0.VersionedTable(
        entityName: 'history_workouts',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
          'UNIQUE(completed_by, completes)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_9,
          _column_10,
          _column_11,
          _column_12,
          _column_13,
          _column_14,
          _column_6,
          _column_7,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape15 historyWorkoutExercises = Shape15(
      source: i0.VersionedTable(
        entityName: 'history_workout_exercises',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_15,
          _column_1,
          _column_16,
          _column_17,
          _column_18,
          _column_19,
          _column_20,
          _column_21,
          _column_22,
          _column_23,
          _column_24,
          _column_25,
          _column_26,
          _column_27,
          _column_8,
          _column_28,
          _column_36,
          _column_46,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape15 routineExercises = Shape15(
      source: i0.VersionedTable(
        entityName: 'routine_exercises',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_29,
          _column_1,
          _column_16,
          _column_17,
          _column_18,
          _column_19,
          _column_20,
          _column_21,
          _column_22,
          _column_23,
          _column_24,
          _column_25,
          _column_26,
          _column_30,
          _column_8,
          _column_31,
          _column_36,
          _column_46,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 preferences = Shape4(
      source: i0.VersionedTable(
        entityName: 'preferences',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_32,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 ongoingData = Shape4(
      source: i0.VersionedTable(
        entityName: 'ongoing_data',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_32,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape5 weightMeasurements = Shape5(
      source: i0.VersionedTable(
        entityName: 'weight_measurements',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_33,
          _column_34,
          _column_6,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape9 foods = Shape9(
      source: i0.VersionedTable(
        entityName: 'foods',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_37,
          _column_38,
          _column_39,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape10 nutritionGoals = Shape10(
      source: i0.VersionedTable(
        entityName: 'nutrition_goals',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_38,
          _column_40,
          _column_41,
          _column_42,
          _column_43,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape11 customBarcodeFoods = Shape11(
      source: i0.VersionedTable(
        entityName: 'custom_barcode_foods',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(barcode)',
        ],
        columns: [
          _column_44,
          _column_39,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape12 favoriteFoods = Shape12(
      source: i0.VersionedTable(
        entityName: 'favorite_foods',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_45,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape13 nutritionCategories = Shape13(
      source: i0.VersionedTable(
        entityName: 'nutrition_categories',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_38,
          _column_39,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape16 achievements = Shape16(
      source: i0.VersionedTable(
        entityName: 'achievements',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(achievement_i_d, level)',
        ],
        columns: [
          _column_47,
          _column_48,
          _column_49,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape16 extends i0.VersionedTable {
  Shape16({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get achievementID =>
      columnsByName['achievement_i_d']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get level =>
      columnsByName['level']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get completedAt =>
      columnsByName['completed_at']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_47(String aliasedName) =>
    i1.GeneratedColumn<String>('achievement_i_d', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_48(String aliasedName) =>
    i1.GeneratedColumn<int>('level', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<DateTime> _column_49(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('completed_at', aliasedName, false,
        type: i1.DriftSqlType.dateTime);
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema3 schema) from2To3,
  required Future<void> Function(i1.Migrator m, Schema4 schema) from3To4,
  required Future<void> Function(i1.Migrator m, Schema5 schema) from4To5,
  required Future<void> Function(i1.Migrator m, Schema6 schema) from5To6,
  required Future<void> Function(i1.Migrator m, Schema7 schema) from6To7,
  required Future<void> Function(i1.Migrator m, Schema8 schema) from7To8,
  required Future<void> Function(i1.Migrator m, Schema9 schema) from8To9,
  required Future<void> Function(i1.Migrator m, Schema10 schema) from9To10,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 2:
        final schema = Schema3(database: database);
        final migrator = i1.Migrator(database, schema);
        await from2To3(migrator, schema);
        return 3;
      case 3:
        final schema = Schema4(database: database);
        final migrator = i1.Migrator(database, schema);
        await from3To4(migrator, schema);
        return 4;
      case 4:
        final schema = Schema5(database: database);
        final migrator = i1.Migrator(database, schema);
        await from4To5(migrator, schema);
        return 5;
      case 5:
        final schema = Schema6(database: database);
        final migrator = i1.Migrator(database, schema);
        await from5To6(migrator, schema);
        return 6;
      case 6:
        final schema = Schema7(database: database);
        final migrator = i1.Migrator(database, schema);
        await from6To7(migrator, schema);
        return 7;
      case 7:
        final schema = Schema8(database: database);
        final migrator = i1.Migrator(database, schema);
        await from7To8(migrator, schema);
        return 8;
      case 8:
        final schema = Schema9(database: database);
        final migrator = i1.Migrator(database, schema);
        await from8To9(migrator, schema);
        return 9;
      case 9:
        final schema = Schema10(database: database);
        final migrator = i1.Migrator(database, schema);
        await from9To10(migrator, schema);
        return 10;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema3 schema) from2To3,
  required Future<void> Function(i1.Migrator m, Schema4 schema) from3To4,
  required Future<void> Function(i1.Migrator m, Schema5 schema) from4To5,
  required Future<void> Function(i1.Migrator m, Schema6 schema) from5To6,
  required Future<void> Function(i1.Migrator m, Schema7 schema) from6To7,
  required Future<void> Function(i1.Migrator m, Schema8 schema) from7To8,
  required Future<void> Function(i1.Migrator m, Schema9 schema) from8To9,
  required Future<void> Function(i1.Migrator m, Schema10 schema) from9To10,
}) =>
    i0.VersionedSchema.stepByStepHelper(
        step: migrationSteps(
      from2To3: from2To3,
      from3To4: from3To4,
      from4To5: from4To5,
      from5To6: from5To6,
      from6To7: from6To7,
      from7To8: from7To8,
      from8To9: from8To9,
      from9To10: from9To10,
    ));
